Soluzione.

auto ioc = Infector::getRoot(); //convenience Function. (posso usare SymbolTable separate se voglio) unico vero singleton.

1.

auto ioc2 = ioc.Fork(); // lock sul container o permetto di modificare ioc? => ognuno dei due agisce su differenti pezzi di SymbolTable

2.

ioc2.buildContext(); //lock sulla symbolTable. La hash map dei simboli è condivisa con i context creati

Context1
         \
Context2  - > Wrapped(Hashmap) - > SymbolTable
         /
Context3

Context1.GetInstance<IFoo>(Context2); // IFoo vivrà fino a quando ci sono entrambi I context

Posso Iniettare factories, queste funzioneranno fintanto che è vivo il loro context (puntatore un managed.. )

Context -> Factory -> UniqueInstances



______________________
container

object

factory

c'è circular reference.
chi può usare il weakpointer?

il container verso la factory no, (a meno di ricrearne una nuova qualora la vecchia venisse
distrutta poichè l'ultimo oggetto che l'ha utilizzata è terminato)

object no (a meno di pagare una penalità di weak_ptr.lock ad ogni oggetto creato)

la factory verso il container no

container->factory
factory->container

object->factory

l'idea sarebbe di avere factory statiche che hanno in memoria tutto il necessario (:/)

Program Lifetime -> symbol table (read only)

Containers => usati per costruire oggetti e popolare la symbol table.
(per evitare accessi concorrenti alla symbol table permettere di duplicarne le entry.


Symbol table.

Lifetime. (tiene references

--------------------

Posso permettere di iniettare factories? In teoria no, per il fatto che se la factory ha una 
reference verso il container (deve chiamare la Build) avrei reference circolare e quindi
memory leak.

Però potrei forse avere una reference direttamente alla funzione di costruzione?
Si, la factory può puntare alla funzione di creazione e avere quindi dipendenze
nel contesto. Unica accortezza, la funzione di creazione non può dipendere dal contesto.

Il container deve ricordare le istanze, per il semplice fatto che se qualcuno le
chiede può così ritornarle. Quindi le factory funcions devono poter chiedere al container
le istanze quando creano oggetti che dipendono su di esse



